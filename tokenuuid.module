<?php

/**
 * @file
 * Contains tokenuuid.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;


/**
 * Implements hook_help().
 */
function tokenuuid_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the tokenuuid module.
    case 'help.page.tokenuuid':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Create an Universally unique identifier token for node, term, user, current-user entities.') . '</p>';
      $output .= '<ul>' .
        '<li>[node:uuid]</li>' .
        '<li>[term:uuid]</li>' .
        '<li>[user:uuid]</li>' .
        '<li>[current-user:uuid]</li>' .
      '</ul>';
      return $output;
    default:
  }
}

/**
 * Implements hook_token_info().
 */
function tokenuuid_token_info() {
  // Node
  $info['tokens']['node']['uuid'] = [
    'name' => t('Content UUID'),
    'description' => t('The unique UUID of the content item, or "node".'),
    'needs-data' => 'node',
  ];
  // Term
  if (\Drupal::moduleHandler()->moduleExists('taxonomy')) {
    $info['tokens']['term']['uuid'] = [
      'name' => t('Term UUID'),
      'description' => t('The unique UUID of the Taxonomy term.'),
    ];
  }
  // Current User
  $info['tokens']['current-user']['uuid'] = [
    'name' => t('Current user UUID'),
    'description' => t('The unique UUID of the curent user.'),
  ];
  // User
  $info['tokens']['user']['uuid'] = [
    'name' => t('User UUID'),
    'description' => t('The unique UUID of the user.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @param string $type machine name of the group (type)
 * @param array $tokens tokens to be replaced.
 * @param array $data An associative array of data objects
 * @param array $options An associative array of options for token replacement
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleableMetadata
 *
 * @return array  associative keyed by [type:token] strings
 */
function tokenuuid_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleableMetadata) {
  $entity_types = ['node', 'user', 'current-user', 'term'];
  foreach ($entity_types as $entity_type) {
    if ($type == $entity_type && !empty($data[$entity_type])) {
      $entity = $data[$entity_type];
      $replaced = [];
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'uuid':
            $replaced[$original] = $entity->uuid();
            break;
        }
      }
      return $replaced;
    }
  }
}

